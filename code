pip install yfinance pandas scikit-learn matplotlib

# Importing necessary libraries
import yfinance as yf
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error

# Step 1: Download Historical Stock Data (e.g., Apple)
stock_data = yf.download('AAPL', start='2010-01-01', end='2025-01-01')

# Step 2: Prepare the Data (Features and Target)
stock_data['Date'] = stock_data.index
stock_data['Date'] = stock_data['Date'].map(pd.Timestamp.toordinal)

# We'll predict the 'Close' price, so we use it as the target
X = stock_data[['Date']]  # Feature: Date (for simplicity)
y = stock_data['Close']  # Target: Closing price

# Step 3: Split Data into Training and Testing
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, shuffle=False)

# Step 4: Train the Model
model = LinearRegression()
model.fit(X_train, y_train)

# Step 5: Make Predictions
y_pred = model.predict(X_test)

# Step 6: Evaluate the Model
mse = mean_squared_error(y_test, y_pred)
rmse = np.sqrt(mse)

# Print evaluation metrics
print(f"Mean Squared Error: {mse}")
print(f"Root Mean Squared Error: {rmse}")

# Step 7: Visualize the Results
plt.figure(figsize=(10, 6))
plt.plot(stock_data.index[-len(y_test):], y_test, label='True Prices', color='blue')
plt.plot(stock_data.index[-len(y_test):], y_pred, label='Predicted Prices', color='red')
plt.legend()
plt.title('Stock Price Prediction')
plt.xlabel('Date')
plt.ylabel('Price')
plt.show()
